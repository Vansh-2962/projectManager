// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  ADMIN
  MEMBER
}

enum Visibility{
  PRIVATE
  PUBLIC
}

enum ProjectStatus{
  PLANNING
  ACTIVE
  COMPLETED
}

enum TaskStatus{
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority{
  LOW
  MEDIUM
  HIGH
}

model User {
  id              String         @id          @default(uuid())
  name            String  
  clerkId         String
  email           String        @unique
  profilePic      String?
  role            Role                        @default(MEMBER)
  memberships     Membership[]
  comments        Comment[]
  workspaces      Workspace[]
  projects        Project[]
  tasks           Task[]

  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @default(now())
  @@index([email])  
}

model Workspace {
  id              String         @id          @default(uuid())
  name            String
  description     String
  isPublic        Boolean                     @default(false)
  visibility      Visibility                  @default(PRIVATE)
  memberships     Membership[]
  project         Project[]
  createdById     String
  createdBy       User                        @relation(fields: [createdById], references: [id])  

  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @default(now())
}

model Membership{
  id              String         @id          @default(uuid())
  role            Role
  userId          String
  workspaceId     String
  user            User            @relation(fields: [userId], references: [id])
  workspace       Workspace       @relation(fields: [workspaceId], references: [id])

  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @default(now())
  @@index([workspaceId])
}



model Project{
  id              String         @id          @default(uuid())
  name            String
  description     String
  status          ProjectStatus               @default(PLANNING)
  tasks           Task[]
  workspaceId     String
  workspace       Workspace  @relation(fields: [workspaceId], references: [id])
  createdById     String
  createdBy       User                        @relation(fields: [createdById], references: [id]) 
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @default(now())
  @@index([workspaceId])
}


model Task{
  id              String         @id          @default(uuid())
  title           String
  description     String
  status          TaskStatus  
  priority        TaskPriority
  projectId       String
  project         Project                     @relation(fields: [projectId], references: [id])
  assignedToId     String?
  assignedTo       User?                       @relation(fields: [assignedToId], references: [id])
  comments        Comment[]
  dueDate         DateTime  
  
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @default(now())
}

model Comment {
  id              String         @id          @default(uuid())
  message         String
  taskId          String
  userId          String
  task            Task                         @relation(fields: [taskId], references: [id])
  user            User                         @relation(fields: [userId], references: [id]) 
}